// Approach 1: Start from @TheZ3ro's sequence diagram from Verifpal[1] and write
// a native Tamarin theory for it.
//
// [1]: https://github.com/freedomofpress/securedrop-poc/issues/16#issuecomment-1764436420

theory approach1
begin

builtins: asymmetric-encryption, diffie-hellman, symmetric-encryption

rule Jo_tx_enrollment:
    [
        Fr(~jc_priv),
        Fr(~je_priv)
    ]
    --[ Tx($Jo, 'enroll', $Jo) ]->
    [
        !Ltk($J, ~jc_priv), !Pk($J, pk(~jc_priv)),
        !Ltk($J, ~je_priv), !Pk($J, pk(~je_priv)),
        Out(<'enroll', pk(~jc_priv), pk(~je_priv)>),
    ]

rule So_init:
    [
        Fr(~sc_priv),
        Fr(~se_priv),
    ]
    --[ ]->
    [
        !Ltk($S, ~sc_priv), !Pk($J, pk(~sc_priv)),
        !Ltk($S, ~se_priv), !Pk($J, pk(~se_priv)),
    ]

rule Se_rx_enrollment:
    [
        In(<'enroll', jc_pub, je_pub>),
    ]
    --[ Rx($Se, 'enroll', $Jo), Tx($Se, 'broadcast', $Jo) ]->
    [
        Out(<'broadcast', jc_pub, je_pub>)
    ]

rule So_rx_broadcast:
    [
        In(<'broadcast', jc_pub, je_pub>),
    ]
    --[ Rx($So, 'broadcast', $Jo) ]->
    [ St($So, jc_pub, je_pub) ]

rule So_tx_message:
    let source_challenge1 = jc_pub^~me_priv1
        msg_encryption_key1 = je_pub^~me_priv1 in
    [
        Fr(~message1),
        Fr(~me_priv1),
        St($So, jc_pub, je_pub),
    ]
    --[ Tx($So, 'msg', $msg) ]->
    [
        !Ltk($M, ~me_priv1), !Pk($M, pk(~me_priv1)),
        Out(<'msg', pk(~me_priv1), source_challenge1, senc(~message1, msg_encryption_key1)>),
    ]

rule Se_rx_message:
    let server_attestation1 = me_pub1^~re_priv1
        server_shared1 = source_challenge1^~re_priv1 in
    [
        In(<'msg', me_pub1, source_challenge1, ciphertext1>),
        Fr(~re_priv1),
        Fr(~message_id),
    ]
    --[ Rx($Se, 'msg', $msg), Tx($Se, 'ch', $msg) ]->
    [
        Out(<'ch', server_attestation1, senc(~message_id, server_shared1)>),
    ]

lemma journalist_enrollment:
  exists-trace
    "Ex Jo Se #i #j.
          Tx(Jo, 'enroll', Jo) @i &
          Rx(Se, 'enroll', Jo) @j
          "

lemma journalist_broadcast:
  exists-trace
    "Ex Jo Se So #i #j.
          Tx(Se, 'broadcast', Jo) @i &
          Rx(So, 'broadcast', Jo) @j
          "

lemma source_send:
    exists-trace
        "Ex Se So msg #i #j.
            Tx(So, 'msg', msg) @i &
            Rx(Se, 'msg', msg) @j
            "

end
